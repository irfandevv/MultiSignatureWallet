{"id":"../../../node_modules/eth-sig-util/index.js","dependencies":[{"name":"/home/nick/github/multisignaturewallet/package.json","includedInParent":true,"mtime":1557933890204},{"name":"/home/nick/node_modules/eth-sig-util/package.json","includedInParent":true,"mtime":1553863349287},{"name":"buffer","loc":{"line":1,"column":27},"parent":"/home/nick/node_modules/eth-sig-util/index.js","resolved":"/home/nick/.npm-global/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"},{"name":"ethereumjs-util","loc":{"line":2,"column":24},"parent":"/home/nick/node_modules/eth-sig-util/index.js","resolved":"/home/nick/node_modules/ethereumjs-util/dist/index.js"},{"name":"ethereumjs-abi","loc":{"line":3,"column":23},"parent":"/home/nick/node_modules/eth-sig-util/index.js","resolved":"/home/nick/node_modules/ethereumjs-abi/index.js"},{"name":"tweetnacl","loc":{"line":4,"column":21},"parent":"/home/nick/node_modules/eth-sig-util/index.js","resolved":"/home/nick/node_modules/eth-sig-util/node_modules/tweetnacl/nacl-fast.js"},{"name":"tweetnacl-util","loc":{"line":5,"column":20},"parent":"/home/nick/node_modules/eth-sig-util/index.js","resolved":"/home/nick/node_modules/tweetnacl-util/nacl-util.js"}],"generated":{"js":"\nconst { Buffer } = require('buffer');\nconst ethUtil = require('ethereumjs-util');\nconst ethAbi = require('ethereumjs-abi');\nconst nacl = require('tweetnacl');\nnacl.util = require('tweetnacl-util');\n\nconst TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: {type: 'string'},\n            type: {type: 'string'},\n          },\n          required: ['name', 'type'],\n        },\n      },\n    },\n    primaryType: {type: 'string'},\n    domain: {type: 'object'},\n    message: {type: 'object'},\n  },\n  required: ['types', 'primaryType', 'domain', 'message'],\n}\n\n/**\n * A collection of utility functions used for signing typed data\n */\nconst TypedDataUtils = {\n  /**\n   * Encodes an object by encoding and concatenating each of its members\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to encode\n   * @param {Object} types - Type definitions\n   * @returns {string} - Encoded representation of an object\n   */\n  encodeData (primaryType, data, types) {\n    const encodedTypes = ['bytes32']\n    const encodedValues = [this.hashType(primaryType, types)]\n\n    for (const field of types[primaryType]) {\n      let value = data[field.name]\n      if (value !== undefined) {\n        if (field.type === 'bytes') {\n          encodedTypes.push('bytes32')\n          value = ethUtil.sha3(value)\n          encodedValues.push(value)\n        } else if (field.type === 'string') {\n          encodedTypes.push('bytes32')\n          // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n          if (typeof value === 'string') {\n            value = Buffer.from(value, 'utf8')\n          }\n          value = ethUtil.sha3(value)\n          encodedValues.push(value)\n        } else if (types[field.type] !== undefined) {\n          encodedTypes.push('bytes32')\n          value = ethUtil.sha3(this.encodeData(field.type, value, types))\n          encodedValues.push(value)\n        } else if (field.type.lastIndexOf(']') === field.type.length - 1) {\n          throw new Error('Arrays currently unimplemented in encodeData')\n        } else {\n          encodedTypes.push(field.type)\n          encodedValues.push(value)\n        }\n      }\n    }\n\n    return ethAbi.rawEncode(encodedTypes, encodedValues)\n  },\n\n  /**\n   * Encodes the type of an object by encoding a comma delimited list of its members\n   *\n   * @param {string} primaryType - Root type to encode\n   * @param {Object} types - Type definitions\n   * @returns {string} - Encoded representation of the type of an object\n   */\n  encodeType (primaryType, types) {\n    let result = ''\n    let deps = this.findTypeDependencies(primaryType, types).filter(dep => dep !== primaryType)\n    deps = [primaryType].concat(deps.sort())\n    for (const type of deps) {\n      const children = types[type]\n      if (!children) {\n        throw new Error('No type definition specified: ' + type)\n      }\n      result += type + '(' + types[type].map(({ name, type }) => type + ' ' + name).join(',') + ')'\n    }\n    return result\n  },\n\n  /**\n   * Finds all types within a type defintion object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} types - Type definitions\n   * @param {Array} results - current set of accumulated types\n   * @returns {Array} - Set of all types found in the type definition\n   */\n  findTypeDependencies (primaryType, types, results = []) {\n    if (results.includes(primaryType) || types[primaryType] === undefined) { return results }\n    results.push(primaryType)\n    for (const field of types[primaryType]) {\n      for (const dep of this.findTypeDependencies(field.type, types, results)) {\n        !results.includes(dep) && results.push(dep)\n      }\n    }\n    return results\n  },\n\n  /**\n   * Hashes an object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to hash\n   * @param {Object} types - Type definitions\n   * @returns {string} - Hash of an object\n   */\n  hashStruct (primaryType, data, types) {\n    return ethUtil.sha3(this.encodeData(primaryType, data, types))\n  },\n\n  /**\n   * Hashes the type of an object\n   *\n   * @param {string} primaryType - Root type to hash\n   * @param {Object} types - Type definitions\n   * @returns {string} - Hash of an object\n   */\n  hashType (primaryType, types) {\n    return ethUtil.sha3(this.encodeType(primaryType, types))\n  },\n\n  /**\n   * Removes properties from a message object that are not defined per EIP-712\n   *\n   * @param {Object} data - typed message object\n   * @returns {Object} - typed message object with only allowed fields\n   */\n  sanitizeData (data) {\n    const sanitizedData = {}\n    for (const key in TYPED_MESSAGE_SCHEMA.properties) {\n      data[key] && (sanitizedData[key] = data[key])\n    }\n    return sanitizedData\n  },\n\n  /**\n   * Signs a typed message as per EIP-712 and returns its sha3 hash\n   *\n   * @param {Object} typedData - Types message data to sign\n   * @returns {string} - sha3 hash of the resulting signed message\n   */\n  sign (typedData) {\n    const sanitizedData = this.sanitizeData(typedData)\n    const parts = [Buffer.from('1901', 'hex')]\n    parts.push(this.hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types))\n    parts.push(this.hashStruct(sanitizedData.primaryType, sanitizedData.message, sanitizedData.types))\n    return ethUtil.sha3(Buffer.concat(parts))\n  },\n}\n\nmodule.exports = {\n  TYPED_MESSAGE_SCHEMA,\n  TypedDataUtils,\n\n  concatSig: function (v, r, s) {\n    const rSig = ethUtil.fromSigned(r)\n    const sSig = ethUtil.fromSigned(s)\n    const vSig = ethUtil.bufferToInt(v)\n    const rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64)\n    const sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64)\n    const vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig))\n    return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex')\n  },\n\n  normalize: function (input) {\n    if (!input) return\n\n    if (typeof input === 'number') {\n      const buffer = ethUtil.toBuffer(input)\n      input = ethUtil.bufferToHex(buffer)\n    }\n\n    if (typeof input !== 'string') {\n      var msg = 'eth-sig-util.normalize() requires hex string or integer input.'\n      msg += ' received ' + (typeof input) + ': ' + input\n      throw new Error(msg)\n    }\n\n    return ethUtil.addHexPrefix(input.toLowerCase())\n  },\n\n  personalSign: function (privateKey, msgParams) {\n    var message = ethUtil.toBuffer(msgParams.data)\n    var msgHash = ethUtil.hashPersonalMessage(message)\n    var sig = ethUtil.ecsign(msgHash, privateKey)\n    var serialized = ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))\n    return serialized\n  },\n\n  recoverPersonalSignature: function (msgParams) {\n    const publicKey = getPublicKeyFor(msgParams)\n    const sender = ethUtil.publicToAddress(publicKey)\n    const senderHex = ethUtil.bufferToHex(sender)\n    return senderHex\n  },\n\n  extractPublicKey: function (msgParams) {\n    const publicKey = getPublicKeyFor(msgParams)\n    return '0x' + publicKey.toString('hex')\n  },\n\n  typedSignatureHash: function (typedData) {\n    const hashBuffer = typedSignatureHash(typedData)\n    return ethUtil.bufferToHex(hashBuffer)\n  },\n\n  signTypedDataLegacy: function (privateKey, msgParams) {\n    const msgHash = typedSignatureHash(msgParams.data)\n    const sig = ethUtil.ecsign(msgHash, privateKey)\n    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))\n  },\n\n  recoverTypedSignatureLegacy: function (msgParams) {\n    const msgHash = typedSignatureHash(msgParams.data)\n    const publicKey = recoverPublicKey(msgHash, msgParams.sig)\n    const sender = ethUtil.publicToAddress(publicKey)\n    return ethUtil.bufferToHex(sender)\n  },\n\n  encrypt: function(receiverPublicKey, msgParams, version) {\n\n    switch(version) {\n      case 'x25519-xsalsa20-poly1305':\n        if( typeof msgParams.data == 'undefined'){\n          throw new Error('Cannot detect secret message, message params should be of the form {data: \"secret message\"} ')\n        }\n        //generate ephemeral keypair\n        var ephemeralKeyPair = nacl.box.keyPair()\n\n        // assemble encryption parameters - from string to UInt8\n        try {\n          var pubKeyUInt8Array = nacl.util.decodeBase64(receiverPublicKey);\n        } catch (err){\n          throw new Error('Bad public key')\n        }\n\n        var msgParamsUInt8Array = nacl.util.decodeUTF8(msgParams.data);\n        var nonce = nacl.randomBytes(nacl.box.nonceLength);\n\n        // encrypt\n        var encryptedMessage = nacl.box(msgParamsUInt8Array, nonce, pubKeyUInt8Array, ephemeralKeyPair.secretKey);\n\n        // handle encrypted data\n        var output = {\n          version: 'x25519-xsalsa20-poly1305',\n          nonce: nacl.util.encodeBase64(nonce),\n          ephemPublicKey: nacl.util.encodeBase64(ephemeralKeyPair.publicKey),\n          ciphertext: nacl.util.encodeBase64(encryptedMessage)\n        };\n        // return encrypted msg data\n        return output;\n\n      default:\n        throw new Error('Encryption type/version not supported')\n\n    }\n  },\n\n  encryptSafely: function(receiverPublicKey, msgParams, version) {\n\n    const DEFAULT_PADDING_LENGTH = (2 ** 11);\n    const NACL_EXTRA_BYTES = 16;\n\n    let data = msgParams.data;\n    if (!data) {\n      throw new Error('Cannot encrypt empty msg.data');\n    }\n\n    if (typeof data === 'object' && data.toJSON) {\n      // remove toJSON attack vector\n      // TODO, check all possible children\n      throw new Error('Cannot encrypt with toJSON property.  Please remove toJSON property');\n    }\n\n    // add padding\n    const dataWithPadding = {\n      data,\n      padding: '',\n    };\n\n    // calculate padding\n    const dataLength = Buffer.byteLength(JSON.stringify(dataWithPadding), 'utf-8');\n    const modVal = (dataLength % DEFAULT_PADDING_LENGTH);\n    let padLength = 0;\n    // Only pad if necessary\n    if (modVal > 0) {\n      padLength = (DEFAULT_PADDING_LENGTH - modVal) - NACL_EXTRA_BYTES; // nacl extra bytes\n    }\n    dataWithPadding.padding = '0'.repeat(padLength);\n\n    const paddedMsgParams = {data:JSON.stringify(dataWithPadding)};\n    return this.encrypt(receiverPublicKey, paddedMsgParams, version);\n  },\n\n  decrypt: function(encryptedData, receiverPrivateKey) {\n\n    switch(encryptedData.version) {\n      case 'x25519-xsalsa20-poly1305':\n        //string to buffer to UInt8Array\n        var recieverPrivateKeyUint8Array = nacl_decodeHex(receiverPrivateKey)\n        var recieverEncryptionPrivateKey = nacl.box.keyPair.fromSecretKey(recieverPrivateKeyUint8Array).secretKey\n\n        // assemble decryption parameters\n        var nonce = nacl.util.decodeBase64(encryptedData.nonce);\n        var ciphertext = nacl.util.decodeBase64(encryptedData.ciphertext);\n        var ephemPublicKey = nacl.util.decodeBase64(encryptedData.ephemPublicKey);\n\n        // decrypt\n        var decryptedMessage = nacl.box.open(ciphertext, nonce, ephemPublicKey, recieverEncryptionPrivateKey);\n\n        // return decrypted msg data\n        try {\n          var output = nacl.util.encodeUTF8(decryptedMessage);\n        }catch(err) {\n          throw new Error('Decryption failed.')\n        }\n\n        if (output){\n          return output;\n        }else{\n          throw new Error('Decryption failed.')\n        }\n\n\n      default:\n        throw new Error('Encryption type/version not supported.')\n    }\n  },\n\n  decryptSafely: function(encryptedData, receiverPrivateKey) {\n    const dataWithPadding = JSON.parse(this.decrypt(encryptedData, receiverPrivateKey));\n    return dataWithPadding.data;\n  },\n\n\n  getEncryptionPublicKey: function(privateKey){\n    var privateKeyUint8Array = nacl_decodeHex(privateKey)\n    var encryptionPublicKey = nacl.box.keyPair.fromSecretKey(privateKeyUint8Array).publicKey\n    return nacl.util.encodeBase64(encryptionPublicKey)\n  },\n\n  signTypedData: function (privateKey, msgParams) {\n    const message = TypedDataUtils.sign(msgParams.data)\n    const sig = ethUtil.ecsign(message, privateKey)\n    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))\n  },\n\n  recoverTypedSignature: function (msgParams) {\n    const message = TypedDataUtils.sign(msgParams.data)\n    const publicKey = recoverPublicKey(message, msgParams.sig)\n    const sender = ethUtil.publicToAddress(publicKey)\n    return ethUtil.bufferToHex(sender)\n  },\n\n}\n\n/**\n * @param typedData - Array of data along with types, as per EIP712.\n * @returns Buffer\n */\nfunction typedSignatureHash(typedData) {\n  const error = new Error('Expect argument to be non-empty array')\n  if (typeof typedData !== 'object' || !typedData.length) throw error\n\n  const data = typedData.map(function (e) {\n    return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value\n  })\n  const types = typedData.map(function (e) { return e.type })\n  const schema = typedData.map(function (e) {\n    if (!e.name) throw error\n    return e.type + ' ' + e.name\n  })\n\n  return ethAbi.soliditySHA3(\n    ['bytes32', 'bytes32'],\n    [\n      ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema),\n      ethAbi.soliditySHA3(types, data)\n    ]\n  )\n}\n\nfunction recoverPublicKey(hash, sig) {\n  const signature = ethUtil.toBuffer(sig)\n  const sigParams = ethUtil.fromRpcSig(signature)\n  return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s)\n}\n\nfunction getPublicKeyFor (msgParams) {\n  const message = ethUtil.toBuffer(msgParams.data)\n  const msgHash = ethUtil.hashPersonalMessage(message)\n  return recoverPublicKey(msgHash, msgParams.sig)\n}\n\n\nfunction padWithZeroes (number, length) {\n  var myString = '' + number\n  while (myString.length < length) {\n    myString = '0' + myString\n  }\n  return myString\n}\n\n//converts hex strings to the Uint8Array format used by nacl\nfunction nacl_decodeHex(msgHex) {\n  var msgBase64 = (new Buffer(msgHex, 'hex')).toString('base64');\n  return nacl.util.decodeBase64(msgBase64);\n}\n\n\n\n","map":{"mappings":[{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":292,"column":0},"generated":{"line":293,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":293,"column":0},"generated":{"line":294,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":294,"column":0},"generated":{"line":295,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":295,"column":0},"generated":{"line":296,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":296,"column":0},"generated":{"line":297,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":297,"column":0},"generated":{"line":298,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":298,"column":0},"generated":{"line":299,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":299,"column":0},"generated":{"line":300,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":300,"column":0},"generated":{"line":301,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":301,"column":0},"generated":{"line":302,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":302,"column":0},"generated":{"line":303,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":303,"column":0},"generated":{"line":304,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":304,"column":0},"generated":{"line":305,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":305,"column":0},"generated":{"line":306,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":306,"column":0},"generated":{"line":307,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":307,"column":0},"generated":{"line":308,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":308,"column":0},"generated":{"line":309,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":309,"column":0},"generated":{"line":310,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":310,"column":0},"generated":{"line":311,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":311,"column":0},"generated":{"line":312,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":312,"column":0},"generated":{"line":313,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":313,"column":0},"generated":{"line":314,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":314,"column":0},"generated":{"line":315,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":315,"column":0},"generated":{"line":316,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":316,"column":0},"generated":{"line":317,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":317,"column":0},"generated":{"line":318,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":318,"column":0},"generated":{"line":319,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":319,"column":0},"generated":{"line":320,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":320,"column":0},"generated":{"line":321,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":321,"column":0},"generated":{"line":322,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":322,"column":0},"generated":{"line":323,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":323,"column":0},"generated":{"line":324,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":324,"column":0},"generated":{"line":325,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":325,"column":0},"generated":{"line":326,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":326,"column":0},"generated":{"line":327,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":327,"column":0},"generated":{"line":328,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":328,"column":0},"generated":{"line":329,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":329,"column":0},"generated":{"line":330,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":330,"column":0},"generated":{"line":331,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":331,"column":0},"generated":{"line":332,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":332,"column":0},"generated":{"line":333,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":333,"column":0},"generated":{"line":334,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":334,"column":0},"generated":{"line":335,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":335,"column":0},"generated":{"line":336,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":336,"column":0},"generated":{"line":337,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":337,"column":0},"generated":{"line":338,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":338,"column":0},"generated":{"line":339,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":339,"column":0},"generated":{"line":340,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":340,"column":0},"generated":{"line":341,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":341,"column":0},"generated":{"line":342,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":342,"column":0},"generated":{"line":343,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":343,"column":0},"generated":{"line":344,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":344,"column":0},"generated":{"line":345,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":345,"column":0},"generated":{"line":346,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":346,"column":0},"generated":{"line":347,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":347,"column":0},"generated":{"line":348,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":348,"column":0},"generated":{"line":349,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":349,"column":0},"generated":{"line":350,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":350,"column":0},"generated":{"line":351,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":351,"column":0},"generated":{"line":352,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":352,"column":0},"generated":{"line":353,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":353,"column":0},"generated":{"line":354,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":354,"column":0},"generated":{"line":355,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":355,"column":0},"generated":{"line":356,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":356,"column":0},"generated":{"line":357,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":357,"column":0},"generated":{"line":358,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":358,"column":0},"generated":{"line":359,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":359,"column":0},"generated":{"line":360,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":360,"column":0},"generated":{"line":361,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":361,"column":0},"generated":{"line":362,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":362,"column":0},"generated":{"line":363,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":363,"column":0},"generated":{"line":364,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":364,"column":0},"generated":{"line":365,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":365,"column":0},"generated":{"line":366,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":366,"column":0},"generated":{"line":367,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":367,"column":0},"generated":{"line":368,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":368,"column":0},"generated":{"line":369,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":369,"column":0},"generated":{"line":370,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":370,"column":0},"generated":{"line":371,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":371,"column":0},"generated":{"line":372,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":372,"column":0},"generated":{"line":373,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":373,"column":0},"generated":{"line":374,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":374,"column":0},"generated":{"line":375,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":375,"column":0},"generated":{"line":376,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":376,"column":0},"generated":{"line":377,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":377,"column":0},"generated":{"line":378,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":378,"column":0},"generated":{"line":379,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":379,"column":0},"generated":{"line":380,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":380,"column":0},"generated":{"line":381,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":381,"column":0},"generated":{"line":382,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":382,"column":0},"generated":{"line":383,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":383,"column":0},"generated":{"line":384,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":384,"column":0},"generated":{"line":385,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":385,"column":0},"generated":{"line":386,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":386,"column":0},"generated":{"line":387,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":387,"column":0},"generated":{"line":388,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":388,"column":0},"generated":{"line":389,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":389,"column":0},"generated":{"line":390,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":390,"column":0},"generated":{"line":391,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":391,"column":0},"generated":{"line":392,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":392,"column":0},"generated":{"line":393,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":393,"column":0},"generated":{"line":394,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":394,"column":0},"generated":{"line":395,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":395,"column":0},"generated":{"line":396,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":396,"column":0},"generated":{"line":397,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":397,"column":0},"generated":{"line":398,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":398,"column":0},"generated":{"line":399,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":399,"column":0},"generated":{"line":400,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":400,"column":0},"generated":{"line":401,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":401,"column":0},"generated":{"line":402,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":402,"column":0},"generated":{"line":403,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":403,"column":0},"generated":{"line":404,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":404,"column":0},"generated":{"line":405,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":405,"column":0},"generated":{"line":406,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":406,"column":0},"generated":{"line":407,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":407,"column":0},"generated":{"line":408,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":408,"column":0},"generated":{"line":409,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":409,"column":0},"generated":{"line":410,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":410,"column":0},"generated":{"line":411,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":411,"column":0},"generated":{"line":412,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":412,"column":0},"generated":{"line":413,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":413,"column":0},"generated":{"line":414,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":414,"column":0},"generated":{"line":415,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":415,"column":0},"generated":{"line":416,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":416,"column":0},"generated":{"line":417,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":417,"column":0},"generated":{"line":418,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":418,"column":0},"generated":{"line":419,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":419,"column":0},"generated":{"line":420,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":420,"column":0},"generated":{"line":421,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":421,"column":0},"generated":{"line":422,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":422,"column":0},"generated":{"line":423,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":423,"column":0},"generated":{"line":424,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":424,"column":0},"generated":{"line":425,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":425,"column":0},"generated":{"line":426,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":426,"column":0},"generated":{"line":427,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":427,"column":0},"generated":{"line":428,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":428,"column":0},"generated":{"line":429,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":429,"column":0},"generated":{"line":430,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":430,"column":0},"generated":{"line":431,"column":0}},{"source":"../../../node_modules/eth-sig-util/index.js","original":{"line":431,"column":0},"generated":{"line":432,"column":0}}],"sources":{"../../../node_modules/eth-sig-util/index.js":"const { Buffer } = require('buffer');\nconst ethUtil = require('ethereumjs-util');\nconst ethAbi = require('ethereumjs-abi');\nconst nacl = require('tweetnacl');\nnacl.util = require('tweetnacl-util');\n\nconst TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: {type: 'string'},\n            type: {type: 'string'},\n          },\n          required: ['name', 'type'],\n        },\n      },\n    },\n    primaryType: {type: 'string'},\n    domain: {type: 'object'},\n    message: {type: 'object'},\n  },\n  required: ['types', 'primaryType', 'domain', 'message'],\n}\n\n/**\n * A collection of utility functions used for signing typed data\n */\nconst TypedDataUtils = {\n  /**\n   * Encodes an object by encoding and concatenating each of its members\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to encode\n   * @param {Object} types - Type definitions\n   * @returns {string} - Encoded representation of an object\n   */\n  encodeData (primaryType, data, types) {\n    const encodedTypes = ['bytes32']\n    const encodedValues = [this.hashType(primaryType, types)]\n\n    for (const field of types[primaryType]) {\n      let value = data[field.name]\n      if (value !== undefined) {\n        if (field.type === 'bytes') {\n          encodedTypes.push('bytes32')\n          value = ethUtil.sha3(value)\n          encodedValues.push(value)\n        } else if (field.type === 'string') {\n          encodedTypes.push('bytes32')\n          // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n          if (typeof value === 'string') {\n            value = Buffer.from(value, 'utf8')\n          }\n          value = ethUtil.sha3(value)\n          encodedValues.push(value)\n        } else if (types[field.type] !== undefined) {\n          encodedTypes.push('bytes32')\n          value = ethUtil.sha3(this.encodeData(field.type, value, types))\n          encodedValues.push(value)\n        } else if (field.type.lastIndexOf(']') === field.type.length - 1) {\n          throw new Error('Arrays currently unimplemented in encodeData')\n        } else {\n          encodedTypes.push(field.type)\n          encodedValues.push(value)\n        }\n      }\n    }\n\n    return ethAbi.rawEncode(encodedTypes, encodedValues)\n  },\n\n  /**\n   * Encodes the type of an object by encoding a comma delimited list of its members\n   *\n   * @param {string} primaryType - Root type to encode\n   * @param {Object} types - Type definitions\n   * @returns {string} - Encoded representation of the type of an object\n   */\n  encodeType (primaryType, types) {\n    let result = ''\n    let deps = this.findTypeDependencies(primaryType, types).filter(dep => dep !== primaryType)\n    deps = [primaryType].concat(deps.sort())\n    for (const type of deps) {\n      const children = types[type]\n      if (!children) {\n        throw new Error('No type definition specified: ' + type)\n      }\n      result += type + '(' + types[type].map(({ name, type }) => type + ' ' + name).join(',') + ')'\n    }\n    return result\n  },\n\n  /**\n   * Finds all types within a type defintion object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} types - Type definitions\n   * @param {Array} results - current set of accumulated types\n   * @returns {Array} - Set of all types found in the type definition\n   */\n  findTypeDependencies (primaryType, types, results = []) {\n    if (results.includes(primaryType) || types[primaryType] === undefined) { return results }\n    results.push(primaryType)\n    for (const field of types[primaryType]) {\n      for (const dep of this.findTypeDependencies(field.type, types, results)) {\n        !results.includes(dep) && results.push(dep)\n      }\n    }\n    return results\n  },\n\n  /**\n   * Hashes an object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to hash\n   * @param {Object} types - Type definitions\n   * @returns {string} - Hash of an object\n   */\n  hashStruct (primaryType, data, types) {\n    return ethUtil.sha3(this.encodeData(primaryType, data, types))\n  },\n\n  /**\n   * Hashes the type of an object\n   *\n   * @param {string} primaryType - Root type to hash\n   * @param {Object} types - Type definitions\n   * @returns {string} - Hash of an object\n   */\n  hashType (primaryType, types) {\n    return ethUtil.sha3(this.encodeType(primaryType, types))\n  },\n\n  /**\n   * Removes properties from a message object that are not defined per EIP-712\n   *\n   * @param {Object} data - typed message object\n   * @returns {Object} - typed message object with only allowed fields\n   */\n  sanitizeData (data) {\n    const sanitizedData = {}\n    for (const key in TYPED_MESSAGE_SCHEMA.properties) {\n      data[key] && (sanitizedData[key] = data[key])\n    }\n    return sanitizedData\n  },\n\n  /**\n   * Signs a typed message as per EIP-712 and returns its sha3 hash\n   *\n   * @param {Object} typedData - Types message data to sign\n   * @returns {string} - sha3 hash of the resulting signed message\n   */\n  sign (typedData) {\n    const sanitizedData = this.sanitizeData(typedData)\n    const parts = [Buffer.from('1901', 'hex')]\n    parts.push(this.hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types))\n    parts.push(this.hashStruct(sanitizedData.primaryType, sanitizedData.message, sanitizedData.types))\n    return ethUtil.sha3(Buffer.concat(parts))\n  },\n}\n\nmodule.exports = {\n  TYPED_MESSAGE_SCHEMA,\n  TypedDataUtils,\n\n  concatSig: function (v, r, s) {\n    const rSig = ethUtil.fromSigned(r)\n    const sSig = ethUtil.fromSigned(s)\n    const vSig = ethUtil.bufferToInt(v)\n    const rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64)\n    const sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64)\n    const vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig))\n    return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex')\n  },\n\n  normalize: function (input) {\n    if (!input) return\n\n    if (typeof input === 'number') {\n      const buffer = ethUtil.toBuffer(input)\n      input = ethUtil.bufferToHex(buffer)\n    }\n\n    if (typeof input !== 'string') {\n      var msg = 'eth-sig-util.normalize() requires hex string or integer input.'\n      msg += ' received ' + (typeof input) + ': ' + input\n      throw new Error(msg)\n    }\n\n    return ethUtil.addHexPrefix(input.toLowerCase())\n  },\n\n  personalSign: function (privateKey, msgParams) {\n    var message = ethUtil.toBuffer(msgParams.data)\n    var msgHash = ethUtil.hashPersonalMessage(message)\n    var sig = ethUtil.ecsign(msgHash, privateKey)\n    var serialized = ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))\n    return serialized\n  },\n\n  recoverPersonalSignature: function (msgParams) {\n    const publicKey = getPublicKeyFor(msgParams)\n    const sender = ethUtil.publicToAddress(publicKey)\n    const senderHex = ethUtil.bufferToHex(sender)\n    return senderHex\n  },\n\n  extractPublicKey: function (msgParams) {\n    const publicKey = getPublicKeyFor(msgParams)\n    return '0x' + publicKey.toString('hex')\n  },\n\n  typedSignatureHash: function (typedData) {\n    const hashBuffer = typedSignatureHash(typedData)\n    return ethUtil.bufferToHex(hashBuffer)\n  },\n\n  signTypedDataLegacy: function (privateKey, msgParams) {\n    const msgHash = typedSignatureHash(msgParams.data)\n    const sig = ethUtil.ecsign(msgHash, privateKey)\n    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))\n  },\n\n  recoverTypedSignatureLegacy: function (msgParams) {\n    const msgHash = typedSignatureHash(msgParams.data)\n    const publicKey = recoverPublicKey(msgHash, msgParams.sig)\n    const sender = ethUtil.publicToAddress(publicKey)\n    return ethUtil.bufferToHex(sender)\n  },\n\n  encrypt: function(receiverPublicKey, msgParams, version) {\n\n    switch(version) {\n      case 'x25519-xsalsa20-poly1305':\n        if( typeof msgParams.data == 'undefined'){\n          throw new Error('Cannot detect secret message, message params should be of the form {data: \"secret message\"} ')\n        }\n        //generate ephemeral keypair\n        var ephemeralKeyPair = nacl.box.keyPair()\n\n        // assemble encryption parameters - from string to UInt8\n        try {\n          var pubKeyUInt8Array = nacl.util.decodeBase64(receiverPublicKey);\n        } catch (err){\n          throw new Error('Bad public key')\n        }\n\n        var msgParamsUInt8Array = nacl.util.decodeUTF8(msgParams.data);\n        var nonce = nacl.randomBytes(nacl.box.nonceLength);\n\n        // encrypt\n        var encryptedMessage = nacl.box(msgParamsUInt8Array, nonce, pubKeyUInt8Array, ephemeralKeyPair.secretKey);\n\n        // handle encrypted data\n        var output = {\n          version: 'x25519-xsalsa20-poly1305',\n          nonce: nacl.util.encodeBase64(nonce),\n          ephemPublicKey: nacl.util.encodeBase64(ephemeralKeyPair.publicKey),\n          ciphertext: nacl.util.encodeBase64(encryptedMessage)\n        };\n        // return encrypted msg data\n        return output;\n\n      default:\n        throw new Error('Encryption type/version not supported')\n\n    }\n  },\n\n  encryptSafely: function(receiverPublicKey, msgParams, version) {\n\n    const DEFAULT_PADDING_LENGTH = (2 ** 11);\n    const NACL_EXTRA_BYTES = 16;\n\n    let data = msgParams.data;\n    if (!data) {\n      throw new Error('Cannot encrypt empty msg.data');\n    }\n\n    if (typeof data === 'object' && data.toJSON) {\n      // remove toJSON attack vector\n      // TODO, check all possible children\n      throw new Error('Cannot encrypt with toJSON property.  Please remove toJSON property');\n    }\n\n    // add padding\n    const dataWithPadding = {\n      data,\n      padding: '',\n    };\n\n    // calculate padding\n    const dataLength = Buffer.byteLength(JSON.stringify(dataWithPadding), 'utf-8');\n    const modVal = (dataLength % DEFAULT_PADDING_LENGTH);\n    let padLength = 0;\n    // Only pad if necessary\n    if (modVal > 0) {\n      padLength = (DEFAULT_PADDING_LENGTH - modVal) - NACL_EXTRA_BYTES; // nacl extra bytes\n    }\n    dataWithPadding.padding = '0'.repeat(padLength);\n\n    const paddedMsgParams = {data:JSON.stringify(dataWithPadding)};\n    return this.encrypt(receiverPublicKey, paddedMsgParams, version);\n  },\n\n  decrypt: function(encryptedData, receiverPrivateKey) {\n\n    switch(encryptedData.version) {\n      case 'x25519-xsalsa20-poly1305':\n        //string to buffer to UInt8Array\n        var recieverPrivateKeyUint8Array = nacl_decodeHex(receiverPrivateKey)\n        var recieverEncryptionPrivateKey = nacl.box.keyPair.fromSecretKey(recieverPrivateKeyUint8Array).secretKey\n\n        // assemble decryption parameters\n        var nonce = nacl.util.decodeBase64(encryptedData.nonce);\n        var ciphertext = nacl.util.decodeBase64(encryptedData.ciphertext);\n        var ephemPublicKey = nacl.util.decodeBase64(encryptedData.ephemPublicKey);\n\n        // decrypt\n        var decryptedMessage = nacl.box.open(ciphertext, nonce, ephemPublicKey, recieverEncryptionPrivateKey);\n\n        // return decrypted msg data\n        try {\n          var output = nacl.util.encodeUTF8(decryptedMessage);\n        }catch(err) {\n          throw new Error('Decryption failed.')\n        }\n\n        if (output){\n          return output;\n        }else{\n          throw new Error('Decryption failed.')\n        }\n\n\n      default:\n        throw new Error('Encryption type/version not supported.')\n    }\n  },\n\n  decryptSafely: function(encryptedData, receiverPrivateKey) {\n    const dataWithPadding = JSON.parse(this.decrypt(encryptedData, receiverPrivateKey));\n    return dataWithPadding.data;\n  },\n\n\n  getEncryptionPublicKey: function(privateKey){\n    var privateKeyUint8Array = nacl_decodeHex(privateKey)\n    var encryptionPublicKey = nacl.box.keyPair.fromSecretKey(privateKeyUint8Array).publicKey\n    return nacl.util.encodeBase64(encryptionPublicKey)\n  },\n\n  signTypedData: function (privateKey, msgParams) {\n    const message = TypedDataUtils.sign(msgParams.data)\n    const sig = ethUtil.ecsign(message, privateKey)\n    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))\n  },\n\n  recoverTypedSignature: function (msgParams) {\n    const message = TypedDataUtils.sign(msgParams.data)\n    const publicKey = recoverPublicKey(message, msgParams.sig)\n    const sender = ethUtil.publicToAddress(publicKey)\n    return ethUtil.bufferToHex(sender)\n  },\n\n}\n\n/**\n * @param typedData - Array of data along with types, as per EIP712.\n * @returns Buffer\n */\nfunction typedSignatureHash(typedData) {\n  const error = new Error('Expect argument to be non-empty array')\n  if (typeof typedData !== 'object' || !typedData.length) throw error\n\n  const data = typedData.map(function (e) {\n    return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value\n  })\n  const types = typedData.map(function (e) { return e.type })\n  const schema = typedData.map(function (e) {\n    if (!e.name) throw error\n    return e.type + ' ' + e.name\n  })\n\n  return ethAbi.soliditySHA3(\n    ['bytes32', 'bytes32'],\n    [\n      ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema),\n      ethAbi.soliditySHA3(types, data)\n    ]\n  )\n}\n\nfunction recoverPublicKey(hash, sig) {\n  const signature = ethUtil.toBuffer(sig)\n  const sigParams = ethUtil.fromRpcSig(signature)\n  return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s)\n}\n\nfunction getPublicKeyFor (msgParams) {\n  const message = ethUtil.toBuffer(msgParams.data)\n  const msgHash = ethUtil.hashPersonalMessage(message)\n  return recoverPublicKey(msgHash, msgParams.sig)\n}\n\n\nfunction padWithZeroes (number, length) {\n  var myString = '' + number\n  while (myString.length < length) {\n    myString = '0' + myString\n  }\n  return myString\n}\n\n//converts hex strings to the Uint8Array format used by nacl\nfunction nacl_decodeHex(msgHex) {\n  var msgBase64 = (new Buffer(msgHex, 'hex')).toString('base64');\n  return nacl.util.decodeBase64(msgBase64);\n}\n\n\n\n"},"lineCount":432}},"hash":"282da594292198c42def4def4e27989f","cacheData":{"env":{}}}